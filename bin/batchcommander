#!/usr/bin/env python

# This file is copyright (C) 2009 by Ricardo Lafuente
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   The name of the author may not be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
#   EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#   OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#   OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''Launch the Batch Commander GUI utility'''

import sys, os
from PyQt4 import QtGui, QtCore
from batchcommander.controls import ColorChooserControl, NumberControl, ToggleControl, ChoiceControl, createControlFromField
from batchcommander.parser import Section, Field, parse_datafile, generate_fields
from batchcommander.defaults import UNITS, TOGGLE, COLOR, NUMBER, CHOICE

DEFAULT_INPUTFILE = './sarovar.tex'
DEFAULT_OUTPUTFILE = './river_valley.sty'
DEFAULT_PDFOUTPUTFILE = './output.pdf'

MAINBOXWIDTH = 370
MAINBOXHEIGHT = 200
FIELDHEIGHT = 36
FIELDWIDTH = 370

class BatchCommander:
    '''Launch the Batch Commander UI.'''
    def __init__(self, datafile, 
                 inputfile=DEFAULT_INPUTFILE, 
                 outputfile=DEFAULT_OUTPUTFILE, 
                 pdfoutputfile=DEFAULT_PDFOUTPUTFILE):
        self.datafile = datafile
        self.inputfile = inputfile
        self.outputfile = outputfile
        self.pdfoutputfile = pdfoutputfile
        # TODO: adapt this to str.format() syntax when migrating to py2.6
        self.command = 'pdflatex %(tex_file)s %(pdf_file)s'
        self.sections = None
        self.immediate = True
        
        self.app = QtGui.QApplication(sys.argv)
        self.showMainWindow()
        self.showControlsWindow()
        
    def showMainWindow(self):
        '''Create and display the QT interface.'''
        self.tab_window = QtGui.QTabWidget()
        
        main_frame = QtGui.QFrame()
        run_button = QtGui.QPushButton('Run', main_frame)
        main_frame.connect(run_button, QtCore.SIGNAL('clicked()'), self.outputStyFile)
        self.tab_window.addTab(main_frame, 'Main')
        
        data_frame = QtGui.QFrame()
        self.tab_window.addTab(data_frame, 'Data files')
        
        self.tab_window.setGeometry(0,0,MAINBOXWIDTH,MAINBOXHEIGHT)
        self.tab_window.show()

    def showControlsWindow(self):
        datadict = parse_datafile(self.datafile)
        self.toolbox = QtGui.QToolBox()
        self.sections = generate_fields(datadict)

        for section in self.sections:
            # count fields
            numberOfFields = len(section.fields)
            
            # make frame        
            container = QtGui.QFrame()
            container.setGeometry(0,0,FIELDWIDTH, FIELDHEIGHT*numberOfFields)
            
            fieldCount = 0
            
            for field in section.fields:
                control = createControlFromField(field, parent=container, w=FIELDWIDTH, h=FIELDHEIGHT)
                # place the control in absolute coords
                control.setGeometry(0,fieldCount*FIELDHEIGHT, FIELDWIDTH, FIELDHEIGHT)
                if self.immediate:
                    # immediate mode = tweaking a control triggers the run procedure
                    control.connect(control, QtCore.SIGNAL('controlChanged()'), self.outputStyFile)
                
                fieldCount += 1

            self.scrollbox = QtGui.QScrollArea()
            self.scrollbox.setWidget(container)
            # make scrollbox flat
            self.scrollbox.setFrameStyle(container.NoFrame)
            self.toolbox.addItem(self.scrollbox, section.name)

        self.toolbox.show()
        self.toolbox.setGeometry(0,MAINBOXHEIGHT,FIELDWIDTH+25,400)

        sys.exit(self.app.exec_())

    def outputStyFile(self):
        file = open(self.outputfile, 'w')
        # begindoc string
        file.write('\AtBeginDocument{\n')
        # write each field's value
        for section in self.sections:
            section.styleOutput(file)
        file.write('                }\n')
        file.close()
        os.system(self.command % {'tex_file': self.inputfile, 
                                  'pdf_file': self.pdfoutputfile})
                                  
    def setInputFile(self, infile):
        self.inputfile = infile
        self.directory = os.path.dirname(infile)
        filename = os.path.basename(infile)
        # track where the log file generated by pdflatex will be
        self.logfilename = self.directory + os.path.splitext(filename)[0] + '.log'

if __name__ == '__main__':
    bc = BatchCommander(datafile=sys.argv[1])
