/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.1 on Tue Jun  8 17:01:01 2010
 */

#include "sipAPIQtPoppler.h"

#line 100 "poppler-qt4.sip"
#define UNSTABLE_POPPLER_QT4 1
#include <qt4/poppler-qt4.h>
#line 13 "sipQtPopplerPopplerPage.cpp"

#line 41 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 17 "sipQtPopplerPopplerPage.cpp"
#line 100 "/usr/share/sip/PyQt4/QtCore/qsize.sip"
#include <qsize.h>
#line 20 "sipQtPopplerPopplerPage.cpp"
#line 125 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 23 "sipQtPopplerPopplerPage.cpp"
#line 27 "poppler-qt4.sip"
#define UNSTABLE_POPPLER_QT4 1
#include <qt4/poppler-qt4.h>
#line 27 "sipQtPopplerPopplerPage.cpp"
#line 41 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 30 "sipQtPopplerPopplerPage.cpp"
#line 160 "/usr/share/sip/PyQt4/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "sipQtPopplerPopplerPage.cpp"
#line 41 "/usr/share/sip/PyQt4/QtGui/qimage.sip"
#include <qimage.h>
#line 36 "sipQtPopplerPopplerPage.cpp"


extern "C" {static PyObject *meth_Poppler_Page_renderToImage(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_renderToImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0 = 72;
        double a1 = 72;
        int a2 = -1;
        int a3 = -1;
        int a4 = -1;
        int a5 = -1;
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|ddiiii", &sipSelf, sipType_Poppler_Page, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->renderToImage(a0,a1,a2,a3,a4,a5));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_renderToImage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_Page_text(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF * a0;
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Poppler_Page, &sipCpp, sipType_QRectF, &a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_text, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_Page_search(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_search(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString * a0;
        int a0State = 0;
        QRectF * a1;
        Poppler::Page::SearchDirection a2;
        Poppler::Page::SearchMode a3;
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9EE", &sipSelf, sipType_Poppler_Page, &sipCpp, sipType_QString,&a0, &a0State, sipType_QRectF, &a1, sipType_Poppler_Page_SearchDirection, &a2, sipType_Poppler_Page_SearchMode, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->search(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_search, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_Page_textList(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_textList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_Page, &sipCpp))
        {
            QList<Poppler::TextBox *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Poppler::TextBox *>(sipCpp->textList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101Poppler_TextBox,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_textList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_Page_pageSizeF(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_pageSizeF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_Page, &sipCpp))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->pageSizeF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_pageSizeF, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_Page_pageSize(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_Page, &sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->pageSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_pageSize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_Page_orientation(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_Page, &sipCpp))
        {
            Poppler::Page::Orientation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->orientation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Poppler_Page_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_orientation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_Page_defaultCTM(PyObject *, PyObject *);}
static PyObject *meth_Poppler_Page_defaultCTM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        double a2;
        int a3;
        bool a4;
        Poppler::Page *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddib", &sipSelf, sipType_Poppler_Page, &sipCpp, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->defaultCTM(&a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Page, sipName_defaultCTM, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Poppler_Page(void *, const sipTypeDef *);}
static void *cast_Poppler_Page(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Poppler_Page)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Poppler_Page(void *, int);}
static void release_Poppler_Page(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Poppler::Page *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Poppler_Page(sipSimpleWrapper *);}
static void dealloc_Poppler_Page(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Poppler_Page(sipSelf->u.cppPtr,0);
    }
}


static PyMethodDef methods_Poppler_Page[] = {
    {SIP_MLNAME_CAST(sipName_defaultCTM), meth_Poppler_Page_defaultCTM, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_orientation), meth_Poppler_Page_orientation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageSize), meth_Poppler_Page_pageSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pageSizeF), meth_Poppler_Page_pageSizeF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_renderToImage), meth_Poppler_Page_renderToImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_search), meth_Poppler_Page_search, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_Poppler_Page_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textList), meth_Poppler_Page_textList, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_Poppler_Page[] = {
    {sipName_CaseInsensitive, Poppler::Page::CaseInsensitive, 12},
    {sipName_CaseSensitive, Poppler::Page::CaseSensitive, 12},
    {sipName_FromTop, Poppler::Page::FromTop, 11},
    {sipName_Landscape, Poppler::Page::Landscape, 10},
    {sipName_NextResult, Poppler::Page::NextResult, 11},
    {sipName_Portrait, Poppler::Page::Portrait, 10},
    {sipName_PreviousResult, Poppler::Page::PreviousResult, 11},
    {sipName_Seascape, Poppler::Page::Seascape, 10},
    {sipName_UpsideDown, Poppler::Page::UpsideDown, 10},
};


pyqt4ClassTypeDef sipTypeDef_QtPoppler_Poppler_Page = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Poppler__Page,
        {0}
    },
    {
        sipNameNr_Page,
        {0, 255, 0},
        8, methods_Poppler_Page,
        9, enummembers_Poppler_Page,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Poppler_Page,
    0,
    0,
    0,
    release_Poppler_Page,
    cast_Poppler_Page,
    0,
    0,
    0
},
    0,
    0,
    0
};
