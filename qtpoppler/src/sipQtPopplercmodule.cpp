/*
 * Module code.
 *
 * Generated by SIP 4.10.1 on Tue Jun  8 17:01:01 2010
 */

#include "sipAPIQtPoppler.h"


/* Define the strings used by this module. */
const char sipStrings_QtPoppler[] = {
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'B', 'a', 'c', 'k', 'e', 'n', 'd', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'P', 'a', 'g', 'e', ':', ':', 'S', 'e', 'a', 'r', 'c', 'h', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 's', 't', '<', 'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'E', 'm', 'b', 'e', 'd', 'd', 'e', 'd', 'F', 'i', 'l', 'e', '*', '>', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'R', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'P', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'o', 'k', 'T', 'o', 'E', 'x', 't', 'r', 'a', 'c', 't', 'F', 'o', 'r', 'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', ':', ':', 'P', 'a', 'g', 'e', 'M', 'o', 'd', 'e', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'P', 'a', 'g', 'e', ':', ':', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'P', 'a', 'g', 'e', ':', ':', 'S', 'e', 'a', 'r', 'c', 'h', 'M', 'o', 'd', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'F', 'o', 'n', 't', 'I', 'n', 'f', 'o', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'T', 'e', 'x', 't', 'B', 'o', 'x', '*', '>', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'F', 'o', 'n', 't', 'I', 'n', 'f', 'o', ':', ':', 'T', 'y', 'p', 'e', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'E', 'm', 'b', 'e', 'd', 'd', 'e', 'd', 'F', 'i', 'l', 'e', 0,
    'o', 'k', 'T', 'o', 'C', 'r', 'e', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'F', 'i', 'e', 'l', 'd', 's', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'F', 'o', 'n', 't', 'I', 'n', 'f', 'o', 0,
    'h', 'a', 's', 'E', 'm', 'b', 'e', 'd', 'd', 'e', 'd', 'F', 'i', 'l', 'e', 's', 0,
    'o', 'k', 'T', 'o', 'P', 'r', 'i', 'n', 't', 'H', 'i', 'g', 'h', 'R', 'e', 's', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'T', 'e', 'x', 't', 'B', 'o', 'x', 0,
    'T', 'e', 'x', 't', 'A', 'n', 't', 'i', 'a', 'l', 'i', 'a', 's', 'i', 'n', 'g', 0,
    'C', 'a', 's', 'e', 'I', 'n', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 0,
    'T', 'w', 'o', 'C', 'o', 'l', 'u', 'm', 'n', 'R', 'i', 'g', 'h', 't', 0,
    'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'R', 'e', 's', 'u', 'l', 't', 0,
    'A', 'r', 't', 'h', 'u', 'r', 'B', 'a', 'c', 'k', 'e', 'n', 'd', 0,
    'S', 'p', 'l', 'a', 's', 'h', 'B', 'a', 'c', 'k', 'e', 'n', 'd', 0,
    's', 'e', 't', 'P', 'a', 'p', 'e', 'r', 'C', 'o', 'l', 'o', 'r', 0,
    'e', 'm', 'b', 'e', 'd', 'd', 'e', 'd', 'F', 'i', 'l', 'e', 's', 0,
    'T', 'w', 'o', 'C', 'o', 'l', 'u', 'm', 'n', 'L', 'e', 'f', 't', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'T', 'o', 'I', 'm', 'a', 'g', 'e', 0,
    'P', 'o', 'p', 'p', 'l', 'e', 'r', ':', ':', 'P', 'a', 'g', 'e', 0,
    'h', 'a', 's', 'S', 'p', 'a', 'c', 'e', 'A', 'f', 't', 'e', 'r', 0,
    's', 'e', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'H', 'i', 'n', 't', 0,
    'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 0,
    's', 'c', 'a', 'n', 'F', 'o', 'r', 'F', 'o', 'n', 't', 's', 0,
    'o', 'k', 'T', 'o', 'A', 's', 's', 'e', 'm', 'b', 'l', 'e', 0,
    'o', 'k', 'T', 'o', 'F', 'i', 'l', 'l', 'F', 'o', 'r', 'm', 0,
    'o', 'k', 'T', 'o', 'A', 'd', 'd', 'N', 'o', 't', 'e', 's', 0,
    'i', 's', 'L', 'i', 'n', 'e', 'a', 'r', 'i', 'z', 'e', 'd', 0,
    'T', 'w', 'o', 'P', 'a', 'g', 'e', 'R', 'i', 'g', 'h', 't', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'D', 'a', 't', 'e', 0,
    'i', 's', 'E', 'n', 'c', 'r', 'y', 'p', 't', 'e', 'd', 0,
    'T', 'w', 'o', 'P', 'a', 'g', 'e', 'L', 'e', 'f', 't', 0,
    'U', 's', 'e', 'O', 'u', 't', 'l', 'i', 'n', 'e', 's', 0,
    'C', 'I', 'D', 'T', 'r', 'u', 'e', 'T', 'y', 'p', 'e', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'B', 'o', 'x', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'o', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'p', 'a', 'p', 'e', 'r', 'C', 'o', 'l', 'o', 'r', 0,
    'p', 'd', 'f', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'o', 'k', 'T', 'o', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'p', 'a', 'g', 'e', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'S', 'i', 'n', 'g', 'l', 'e', 'P', 'a', 'g', 'e', 0,
    'F', 'u', 'l', 'l', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'T', 'M', 0,
    'U', 'p', 's', 'i', 'd', 'e', 'D', 'o', 'w', 'n', 0,
    'N', 'e', 'x', 't', 'R', 'e', 's', 'u', 'l', 't', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'D', 'a', 't', 'e', 0,
    'i', 's', 'E', 'm', 'b', 'e', 'd', 'd', 'e', 'd', 0,
    'o', 'k', 'T', 'o', 'P', 'r', 'i', 'n', 't', 0,
    'O', 'n', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'U', 's', 'e', 'A', 't', 't', 'a', 'c', 'h', 0,
    'U', 's', 'e', 'T', 'h', 'u', 'm', 'b', 's', 0,
    'p', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 'F', 0,
    'C', 'I', 'D', 'T', 'y', 'p', 'e', '0', 'C', 0,
    'L', 'a', 'n', 'd', 's', 'c', 'a', 'p', 'e', 0,
    'Q', 't', 'P', 'o', 'p', 'p', 'l', 'e', 'r', 0,
    'o', 'k', 'T', 'o', 'C', 'o', 'p', 'y', 0,
    'i', 'n', 'f', 'o', 'K', 'e', 'y', 's', 0,
    'i', 's', 'L', 'o', 'c', 'k', 'e', 'd', 0,
    'p', 'a', 'g', 'e', 'M', 'o', 'd', 'e', 0,
    'N', 'o', 'L', 'a', 'y', 'o', 'u', 't', 0,
    'S', 'e', 'a', 's', 'c', 'a', 'p', 'e', 0,
    'i', 's', 'S', 'u', 'b', 's', 'e', 't', 0,
    'C', 'I', 'D', 'T', 'y', 'p', 'e', '0', 0,
    'n', 'e', 'x', 't', 'W', 'o', 'r', 'd', 0,
    't', 'e', 'x', 't', 'L', 'i', 's', 't', 0,
    'n', 'u', 'm', 'P', 'a', 'g', 'e', 's', 0,
    'p', 'a', 'g', 'e', 'S', 'i', 'z', 'e', 0,
    'P', 'o', 'r', 't', 'r', 'a', 'i', 't', 0,
    't', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 0,
    'U', 's', 'e', 'N', 'o', 'n', 'e', 0,
    'F', 'r', 'o', 'm', 'T', 'o', 'p', 0,
    'm', 'o', 'd', 'D', 'a', 't', 'e', 0,
    'u', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    's', 'e', 'a', 'r', 'c', 'h', 0,
    'T', 'y', 'p', 'e', '1', 'C', 0,
    'u', 'n', 'l', 'o', 'c', 'k', 0,
    'f', 'o', 'n', 't', 's', 0,
    'U', 's', 'e', 'O', 'C', 0,
    'T', 'y', 'p', 'e', '3', 0,
    'T', 'y', 'p', 'e', '1', 0,
    'i', 'n', 'f', 'o', 0,
    'p', 'a', 'g', 'e', 0,
    't', 'e', 'x', 't', 0,
    'n', 'a', 'm', 'e', 0,
    'l', 'o', 'a', 'd', 0,
    'd', 'a', 't', 'e', 0,
    'd', 'a', 't', 'a', 0,
    'f', 'i', 'l', 'e', 0,
    't', 'y', 'p', 'e', 0,
    't', 'o', 'c', 0,
};
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__Document__RenderHint, {0}}, sipNameNr_RenderHint, 1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__Document__RenderBackend, {0}}, sipNameNr_RenderBackend, 1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__Document__PageLayout, {0}}, sipNameNr_PageLayout, 1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__Document__PageMode, {0}}, sipNameNr_PageMode, 1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__Page__Orientation, {0}}, sipNameNr_Orientation, 9, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__Page__SearchMode, {0}}, sipNameNr_SearchMode, 9, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__Page__SearchDirection, {0}}, sipNameNr_SearchDirection, 9, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Poppler__FontInfo__Type, {0}}, sipNameNr_Type, 7, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtPoppler_Poppler.super.ctd_base,
    &sipTypeDef_QtPoppler_Poppler_Document.super.ctd_base,
    &enumTypes[2].etd_base,
    &enumTypes[3].etd_base,
    &enumTypes[1].etd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_QtPoppler_Poppler_EmbeddedFile.super.ctd_base,
    &sipTypeDef_QtPoppler_Poppler_FontInfo.super.ctd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtPoppler_Poppler_Page.super.ctd_base,
    &enumTypes[4].etd_base,
    &enumTypes[6].etd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_QtPoppler_Poppler_TextBox.super.ctd_base,
    &sipTypeDef_QtPoppler_QList_0101Poppler_EmbeddedFile.mtd_base,
    &sipTypeDef_QtPoppler_QList_0100Poppler_FontInfo.mtd_base,
    &sipTypeDef_QtPoppler_QList_0101Poppler_TextBox.mtd_base,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt4.QtCore", 0, NULL},
    {"PyQt4.QtXml", 0, NULL},
    {"PyQt4.QtGui", 0, NULL},
    {NULL, -1, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtPoppler = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_QtPoppler,
    0,
    0,
    sipStrings_QtPoppler,
    importsTable,
    NULL,
    17,
    typesTable,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtPoppler;
const sipExportedModuleDef *sipModuleAPI_QtPoppler_QtCore;
const sipExportedModuleDef *sipModuleAPI_QtPoppler_QtXml;
const sipExportedModuleDef *sipModuleAPI_QtPoppler_QtGui;

sip_qt_metaobject_func sip_QtPoppler_qt_metaobject;
sip_qt_metacall_func sip_QtPoppler_qt_metacall;
sip_qt_metacast_func sip_QtPoppler_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtPoppler
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtPoppler
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "QtPoppler",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
#if PY_VERSION_HEX < 0x03010000
    PyObject *sip_sipmod, *sip_capiobj;
#endif

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_QtPoppler, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_QtPoppler), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x03010000

    sipAPI_QtPoppler = reinterpret_cast<const sipAPIDef *>(PyCapsule_Import("sip._C_API", 0));

    if (sipAPI_QtPoppler == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#else

#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("sip"));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");

    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sipAPI_QtPoppler = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));

#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtPoppler,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
#if PY_VERSION_HEX < 0x03010000
        Py_DECREF(sip_sipmod);
#endif
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtPoppler_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtPoppler_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtPoppler_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtPoppler,sipModuleDict) < 0)
    {
#if PY_VERSION_HEX < 0x03010000
        Py_DECREF(sip_sipmod);
#endif
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_QtPoppler_QtCore = sipModuleAPI_QtPoppler.em_imports[0].im_module;
    sipModuleAPI_QtPoppler_QtXml = sipModuleAPI_QtPoppler.em_imports[1].im_module;
    sipModuleAPI_QtPoppler_QtGui = sipModuleAPI_QtPoppler.em_imports[2].im_module;

    SIP_MODULE_RETURN(sipModule);
}
