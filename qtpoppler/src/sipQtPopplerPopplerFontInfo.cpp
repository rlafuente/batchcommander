/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.1 on Tue Jun  8 17:01:01 2010
 */

#include "sipAPIQtPoppler.h"

#line 45 "poppler-qt4.sip"
#define UNSTABLE_POPPLER_QT4 1
#include <qt4/poppler-qt4.h>
#line 13 "sipQtPopplerPopplerFontInfo.cpp"

#line 41 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 17 "sipQtPopplerPopplerFontInfo.cpp"


extern "C" {static PyObject *meth_Poppler_FontInfo_name(PyObject *, PyObject *);}
static PyObject *meth_Poppler_FontInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::FontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_FontInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FontInfo, sipName_name, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_FontInfo_file(PyObject *, PyObject *);}
static PyObject *meth_Poppler_FontInfo_file(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::FontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_FontInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->file());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FontInfo, sipName_file, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_FontInfo_isEmbedded(PyObject *, PyObject *);}
static PyObject *meth_Poppler_FontInfo_isEmbedded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::FontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_FontInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmbedded();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FontInfo, sipName_isEmbedded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_FontInfo_isSubset(PyObject *, PyObject *);}
static PyObject *meth_Poppler_FontInfo_isSubset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::FontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_FontInfo, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSubset();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FontInfo, sipName_isSubset, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_FontInfo_type(PyObject *, PyObject *);}
static PyObject *meth_Poppler_FontInfo_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::FontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_FontInfo, &sipCpp))
        {
            Poppler::FontInfo::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Poppler_FontInfo_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FontInfo, sipName_type, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Poppler_FontInfo_typeName(PyObject *, PyObject *);}
static PyObject *meth_Poppler_FontInfo_typeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Poppler::FontInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Poppler_FontInfo, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->typeName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FontInfo, sipName_typeName, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Poppler_FontInfo(void *, const sipTypeDef *);}
static void *cast_Poppler_FontInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Poppler_FontInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Poppler_FontInfo(void *, int);}
static void release_Poppler_FontInfo(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Poppler::FontInfo *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Poppler_FontInfo(sipSimpleWrapper *);}
static void dealloc_Poppler_FontInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Poppler_FontInfo(sipSelf->u.cppPtr,0);
    }
}


static PyMethodDef methods_Poppler_FontInfo[] = {
    {SIP_MLNAME_CAST(sipName_file), meth_Poppler_FontInfo_file, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmbedded), meth_Poppler_FontInfo_isEmbedded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSubset), meth_Poppler_FontInfo_isSubset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_Poppler_FontInfo_name, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_Poppler_FontInfo_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_typeName), meth_Poppler_FontInfo_typeName, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_Poppler_FontInfo[] = {
    {sipName_CIDTrueType, Poppler::FontInfo::CIDTrueType, 8},
    {sipName_CIDType0, Poppler::FontInfo::CIDType0, 8},
    {sipName_CIDType0C, Poppler::FontInfo::CIDType0C, 8},
    {sipName_TrueType, Poppler::FontInfo::TrueType, 8},
    {sipName_Type1, Poppler::FontInfo::Type1, 8},
    {sipName_Type1C, Poppler::FontInfo::Type1C, 8},
    {sipName_Type3, Poppler::FontInfo::Type3, 8},
    {sipName_unknown, Poppler::FontInfo::unknown, 8},
};


pyqt4ClassTypeDef sipTypeDef_QtPoppler_Poppler_FontInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Poppler__FontInfo,
        {0}
    },
    {
        sipNameNr_FontInfo,
        {0, 255, 0},
        6, methods_Poppler_FontInfo,
        8, enummembers_Poppler_FontInfo,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Poppler_FontInfo,
    0,
    0,
    0,
    release_Poppler_FontInfo,
    cast_Poppler_FontInfo,
    0,
    0,
    0
},
    0,
    0,
    0
};
